--- a/src/link.h	2021-07-07 22:06:53.266679858 +0200
+++ b/src/link.h	2021-07-07 22:07:02.434680323 +0200
@@ -25,6 +25,7 @@
 php_parallel_link_t* php_parallel_link_copy(php_parallel_link_t *link);
 zend_bool            php_parallel_link_send(php_parallel_link_t *link, zval *value);
 zend_bool            php_parallel_link_recv(php_parallel_link_t *link, zval *value);
+zend_long            php_parallel_link_recv_wait(php_parallel_link_t *link, zend_long seconds, zval *value);
 zend_bool            php_parallel_link_close(php_parallel_link_t *link);
 zend_bool            php_parallel_link_closed(php_parallel_link_t *link);
 void                 php_parallel_link_destroy(php_parallel_link_t *link);
--- a/src/link.c	2021-07-07 22:06:44.582679418 +0200
+++ b/src/link.c	2021-07-07 22:07:02.434680323 +0200
@@ -318,6 +318,99 @@
     }
 }
 
+static zend_always_inline zend_long php_parallel_link_recv_wait_unbuffered(php_parallel_link_t *link, zend_long seconds, zval *value) {
+    struct timespec ts;
+    int rc = 0;
+
+    clock_gettime(CLOCK_REALTIME, &ts);
+    ts.tv_sec += seconds;
+
+    pthread_mutex_lock(&link->m.r);
+    pthread_mutex_lock(&link->m.m);
+
+    while (!link->s.c && !link->s.w && !rc) {
+        link->s.r++;
+        rc = pthread_cond_timedwait(&link->c.r, &link->m.m, &ts);
+        link->s.r--;
+
+        if (rc == ETIMEDOUT) {
+            pthread_mutex_unlock(&link->m.m);
+            pthread_mutex_unlock(&link->m.r);
+            return -1;
+        }
+    }
+
+    if (link->s.c || rc) {
+        pthread_mutex_unlock(&link->m.m);
+        pthread_mutex_unlock(&link->m.r);
+        return 0;
+    }
+
+    PARALLEL_ZVAL_COPY(
+        value, &link->port.z, 0);
+    if (Z_TYPE_FLAGS(link->port.z) == PHP_PARALLEL_LINK_CLOSURE_BUFFER) {
+        PARALLEL_ZVAL_DTOR(&link->port.z);
+    }
+    ZVAL_UNDEF(&link->port.z);
+    link->s.w--;
+
+    pthread_cond_signal(&link->c.w);
+    pthread_mutex_unlock(&link->m.m);
+    pthread_mutex_unlock(&link->m.r);
+    return 1;
+}
+
+static zend_always_inline zend_long php_parallel_link_recv_wait_buffered(php_parallel_link_t *link, zend_long seconds, zval *value) {
+    zval *head;
+
+    struct timespec ts;
+    int rc = 0;
+
+    clock_gettime(CLOCK_REALTIME, &ts);
+    ts.tv_sec += seconds;
+
+    pthread_mutex_lock(&link->m.m);
+
+    while (zend_llist_count(&link->port.q.l) == 0) {
+        if (rc == ETIMEDOUT) {
+            pthread_mutex_unlock(&link->m.m);
+            return -1;
+        }
+
+        if (link->s.c || rc) {
+            pthread_mutex_unlock(&link->m.m);
+            return 0;
+        }
+
+        link->s.r++;
+        rc = pthread_cond_timedwait(&link->c.r, &link->m.m, &ts);
+        link->s.r--;
+    }
+
+    head = zend_llist_get_first(&link->port.q.l);
+
+    PARALLEL_ZVAL_COPY(value, head, 0);
+
+    zend_llist_del_element(
+        &link->port.q.l, head, php_parallel_link_queue_delete);
+
+    if (link->s.w) {
+        pthread_cond_signal(&link->c.w);
+    }
+
+    pthread_mutex_unlock(&link->m.m);
+
+    return 1;
+}
+
+zend_long php_parallel_link_recv_wait(php_parallel_link_t *link, zend_long seconds, zval *value) {
+    if (link->type == PHP_PARALLEL_LINK_UNBUFFERED) {
+        return php_parallel_link_recv_wait_unbuffered(link, seconds, value);
+    } else {
+        return php_parallel_link_recv_wait_buffered(link, seconds, value);
+    }
+}
+
 zend_bool php_parallel_link_close(php_parallel_link_t *link) {
     pthread_mutex_lock(&link->m.m);
 
