--- configure.in.orig	2009-04-06 15:15:26.000000000 +0200
+++ configure.in	2009-04-06 15:32:04.000000000 +0200
@@ -614,6 +614,16 @@
     ],
 ,)
 
+AC_ARG_WITH(jvm-path,
+    AS_HELP_STRING([--with-jvm-path],
+        [Use a specific JVM search path at runtime.])
+    [
+                          Usage: --with-jvm-path=<absolute path to parent of jvm home>
+
+                          e. g.: --with-jvm-path=/usr/lib/
+                                 to find JRE/JDK in /usr/lib/jvm/
+    ],
+,)
 AC_ARG_WITH(ant-home,
     AS_HELP_STRING([--with-ant-home],
         [If you have installed Jakarta Ant on your system, please supply the path here.
@@ -3172,6 +3180,26 @@
 AC_SUBST(XINERAMA_LINK)
 
 dnl ===================================================================
+dnl Check for runtime JVM search path
+dnl ===================================================================
+if test "$SOLAR_JAVA" != ""; then
+  AC_MSG_CHECKING([whether to use specific JVM search path at runtime])
+  if test -n "$with_jvm_path" && test "$with_jvm_path" != "no"; then
+     AC_MSG_RESULT([yes])
+     if ! test -d "$with_jvm_path"; then
+        AC_MSG_ERROR(["$with_jvm_path" not a directory])
+     fi
+     if ! test -d "$with_jvm_path"jvm; then
+        AC_MSG_ERROR(["$with_jvm_path"jvm not found, point with_jvm_path to \[/path/to/\]jvm])
+     fi
+     JVM_ONE_PATH_CHECK="$with_jvm_path"
+     AC_SUBST(JVM_ONE_PATH_CHECK)
+  else
+     AC_MSG_RESULT([no])
+  fi
+fi
+
+dnl ===================================================================
 dnl Test for the presence of Ant and that it works
 dnl ===================================================================
 
--- set_soenv.in.orig	2009-04-06 15:36:07.000000000 +0200
+++ set_soenv.in	2009-04-06 15:40:31.000000000 +0200
@@ -1863,6 +1863,7 @@
    ToFile( "JAVACOMPILER",    PathFormat("@JAVACOMPILER@"), "e" );
    ToFile( "JAVAAOTCOMPILER", PathFormat("@JAVAAOTCOMPILER@"), "e" );
    ToFile( "JAVADOC",         PathFormat("@JAVADOC@"), "e" );
+   ToFile( "JVM_ONE_PATH_CHECK", "@JVM_ONE_PATH_CHECK@", "e" );
 }
 ToFile( "SCPDEFS",           '@SCPDEFS@',        "e" );
 ToFile( "SOLAREXTRAINC",     $SOLAREXTRAINC,     "e" );
--- jvmfwk/plugins/sunmajor/pluginlib/makefile.mk.orig	2009-04-06 14:38:34.000000000 +0200
+++ jvmfwk/plugins/sunmajor/pluginlib/makefile.mk	2009-04-06 14:40:44.000000000 +0200
@@ -84,6 +84,10 @@
 .ENDIF # GCC
 .ENDIF #WNT
 
+.IF "$(JVM_ONE_PATH_CHECK)" != ""
+CFLAGS += -DJVM_ONE_PATH_CHECK=\"$(JVM_ONE_PATH_CHECK)\"
+.ENDIF
+
 SHL1VERSIONMAP = sunjavaplugin.map
 SHL1DEPN=
 SHL1IMPLIB=	i$(UNOCOMPONENT1)
--- jvmfwk/plugins/sunmajor/pluginlib/util.hxx.orig	2009-04-06 18:12:49.000000000 +0200
+++ jvmfwk/plugins/sunmajor/pluginlib/util.hxx	2009-04-06 18:13:37.000000000 +0200
@@ -120,6 +120,9 @@
 
 bool getJavaProps(
     const rtl::OUString & exePath,
+#ifdef JVM_ONE_PATH_CHECK
+    const rtl::OUString & homePath,
+#endif
     std::vector<std::pair<rtl::OUString, rtl::OUString> >& props,
     bool * bProcessRun);
 
--- jvmfwk/plugins/sunmajor/pluginlib/util.cxx.orig	2009-04-01 11:57:29.000000000 +0200
+++ jvmfwk/plugins/sunmajor/pluginlib/util.cxx	2009-04-06 18:12:09.000000000 +0200
@@ -88,12 +88,14 @@
  */
 char const *g_arCollectDirs[] = {
     "",
+#ifndef JVM_ONE_PATH_CHECK
     "j2re/", 
     "j2se/", 
     "j2sdk/",
     "jdk/",
     "jre/", 
     "java/",
+#endif
     "jvm/"
 };
 
@@ -105,6 +107,7 @@
     "",
     "System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/"
 #else
+#ifndef JVM_ONE_PATH_CHECK
     "",
     "usr/",
     "usr/local/",
@@ -115,6 +118,9 @@
 #endif
     "usr/lib/",
     "usr/bin/"
+#else
+    JVM_ONE_PATH_CHECK
+#endif
 #endif
 };
 }
@@ -362,6 +368,9 @@
 
 
 bool getJavaProps(const OUString & exePath,
+#ifdef JVM_ONE_PATH_CHECK
+                  const OUString & homePath,
+#endif
                   std::vector<std::pair<rtl::OUString, rtl::OUString> >& props,
                   bool * bProcessRun)
 {
@@ -459,6 +468,15 @@
         OUString sKey = sLine.copy(0, index);
         OUString sVal = sLine.copy(index + 1);
 
+#ifdef JVM_ONE_PATH_CHECK
+        //replace absolute path by linux distro link
+        OUString sHomeProperty(RTL_CONSTASCII_USTRINGPARAM("java.home"));
+        if(sHomeProperty.equals(sKey))
+        {
+            sVal = homePath + OUString::createFromAscii("/jre");
+        }
+#endif
+
         props.push_back(std::make_pair(sKey, sVal));
     }
 
@@ -735,10 +753,12 @@
     createJavaInfoFromWinReg(vecInfos);
 #endif // WNT
 
+#ifndef JVM_ONE_PATH_CHECK
     createJavaInfoFromJavaHome(vecInfos);
     //this function should be called after createJavaInfoDirScan.
     //Otherwise in SDKs Java may be started twice
      createJavaInfoFromPath(vecInfos);
+#endif
 
 #ifdef UNX
     createJavaInfoDirScan(vecInfos);
@@ -800,7 +820,11 @@
         if (item.getFileStatus(status) == File::E_None
             && status.getFileType() == FileStatus::Directory)
         {
+#ifndef JVM_ONE_PATH_CHECK
             ret = sResolved;
+#else
+            ret = path;
+#endif
         }
     }
     else
@@ -829,7 +853,11 @@
         if (item.getFileStatus(status) == File::E_None
             && status.getFileType() == FileStatus::Regular)
         {
+#ifndef JVM_ONE_PATH_CHECK
             ret = sResolved;
+#else
+            ret = path;
+#endif
         }                    
     }
     else
@@ -924,7 +952,11 @@
             }
 
             bool bProcessRun= false;
-            if (getJavaProps(sFilePath, props, & bProcessRun) == false)
+            if (getJavaProps(sFilePath,
+#ifdef JVM_ONE_PATH_CHECK
+                             sResolvedDir,
+#endif
+                             props, & bProcessRun) == false)
             {
                 //The java executable could not be run or the system properties
                 //could not be retrieved. We can assume that this java is corrupt.
@@ -943,7 +975,11 @@
                     //invoked to build the path to the executable. It we start the script directy as .java_wrapper
                     //then it tries to start a jdk/.../native_threads/.java_wrapper. Therefore the link, which
                     //is named java, must be used to start the script.
-                    getJavaProps(sFullPath, props, & bProcessRun);
+                    getJavaProps(sFullPath,
+#ifdef JVM_ONE_PATH_CHECK
+                                 sResolvedDir,
+#endif
+                                 props, & bProcessRun);
                     // Either we found a working 1.3.1                    
                     //Or the java is broken. In both cases we stop searchin under this "root" directory
                     bBreak = true;
--- jvmfwk/plugins/sunmajor/pluginlib/vendorbase.cxx.orig	2009-04-06 18:37:43.000000000 +0200
+++ jvmfwk/plugins/sunmajor/pluginlib/vendorbase.cxx	2009-04-06 18:38:55.000000000 +0200
@@ -132,6 +132,7 @@
         }
         else if (!bHome && sHomeProperty.equals(i->first))
         {
+#ifndef JVM_ONE_PATH_CHECK
            OUString fileURL;
            if (osl_getFileURLFromSystemPath(i->second.pData,& fileURL.pData) ==
                osl_File_E_None)
@@ -145,6 +146,10 @@
                    bHome = true;
                }
            }
+#else
+           m_sHome = i->second;
+           bHome = true;
+#endif
         }
         else if (!bAccess && sAccessProperty.equals(i->first))
         {
