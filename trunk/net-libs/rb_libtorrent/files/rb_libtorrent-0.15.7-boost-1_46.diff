--- include/libtorrent/debug.hpp.orig	2011-02-20 18:44:28.520013417 +0100
+++ include/libtorrent/debug.hpp	2011-02-20 18:46:29.724013585 +0100
@@ -45,8 +45,8 @@
 #pragma warning(push, 1)
 #endif
 
+#include <boost/filesystem.hpp>
 #include <boost/filesystem/fstream.hpp>
-#include <boost/filesystem/convenience.hpp>
 
 #ifdef _MSC_VER
 #pragma warning(pop)
@@ -71,7 +71,7 @@
 #endif
 				char log_name[256];
 				snprintf(log_name, sizeof(log_name), "libtorrent_logs%d", instance);
-				fs::path dir(fs::complete(logpath / log_name));
+				fs::path dir(fs::absolute(logpath / log_name, fs::initial_path()));
 				if (!fs::exists(dir)) fs::create_directories(dir);
 				m_file.open((dir / filename).string().c_str(), std::ios_base::out | (append ? std::ios_base::app : std::ios_base::out));
 				*this << "\n\n\n*** starting log ***\n";
--- include/libtorrent/create_torrent.hpp.orig	2011-02-20 19:20:41.384013589 +0100
+++ include/libtorrent/create_torrent.hpp	2011-02-20 20:28:25.496014112 +0100
@@ -196,13 +196,13 @@
 		fs::path TORRENT_EXPORT get_symlink_path(boost::filesystem::wpath const& p);
 #endif
 
-		template <class Pred, class Str, class PathTraits>
-		void add_files_impl(file_storage& fs, boost::filesystem::basic_path<Str, PathTraits> const& p
-			, boost::filesystem::basic_path<Str, PathTraits> const& l, Pred pred, boost::uint32_t flags)
+		template <class Pred>
+		void add_files_impl(file_storage& fs, boost::filesystem::path const& p
+			, boost::filesystem::path const& l, Pred pred, boost::uint32_t flags)
 		{
-			using boost::filesystem::basic_path;
-			using boost::filesystem::basic_directory_iterator;
-			basic_path<Str, PathTraits> f(p / l);
+			using boost::filesystem::path;
+			using boost::filesystem::directory_iterator;
+			path f(p / l);
 			if (!pred(f)) return;
 
 			bool recurse = is_directory(f);
@@ -213,14 +213,16 @@
 
 			if (recurse)
 			{
-				for (basic_directory_iterator<basic_path<Str, PathTraits> > i(f), end; i != end; ++i)
+				for (directory_iterator i(f), end; i != end; ++i)
 				{
 #if BOOST_VERSION < 103600
-					Str const& leaf = i->path().leaf();
+					// hack: though, wpath is gone anyway
+					path const& leaf = i->path().leaf();
 #else
-					Str const& leaf = i->path().filename();
+					// hack: though, wpath is gone anyway
+					path const& leaf = i->path().filename();
 #endif
-					if (ignore_subdir(leaf)) continue;
+					if (ignore_subdir(leaf.string())) continue;
 					add_files_impl(fs, p, l / leaf, pred, flags);
 				}
 			}
@@ -253,10 +255,10 @@
 		boost::filesystem::path f = file;
 #if BOOST_VERSION < 103600
 		if (f.leaf() == ".") f = f.branch_path();
-		detail::add_files_impl(fs, complete(f).branch_path(), path(f.leaf()), p, flags);
+		detail::add_files_impl(fs, boost::filesystem::absolute(f, boost::filesystem::initial_path()).branch_path(), path(f.leaf()), p, flags);
 #else
 		if (f.filename() == ".") f = f.parent_path();
-		detail::add_files_impl(fs, complete(f).parent_path(), path(f.filename()), p, flags);
+		detail::add_files_impl(fs, boost::filesystem::absolute(f, boost::filesystem::initial_path()).parent_path(), path(f.filename()), p, flags);
 #endif
 	}
 
@@ -267,11 +269,11 @@
 		boost::filesystem::path f = file;
 #if BOOST_VERSION < 103600
 		if (f.leaf() == ".") f = f.branch_path();
-		detail::add_files_impl(fs, complete(f).branch_path(), path(f.leaf())
+		detail::add_files_impl(fs, boost::filesystem::absolute(f, boost::filesystem::initial_path()).branch_path(), path(f.leaf())
 			, detail::default_pred, flags);
 #else
 		if (f.filename() == ".") f = f.parent_path();
-		detail::add_files_impl(fs, complete(f).parent_path(), path(f.filename())
+		detail::add_files_impl(fs, boost::filesystem::absolute(f, boost::filesystem::initial_path()).parent_path(), path(f.leaf())
 			, detail::default_pred, flags);
 #endif
 	}
@@ -345,10 +347,10 @@
 		wpath f = file;
 #if BOOST_VERSION < 103600
 		if (f.leaf() == L".") f = f.branch_path();
-		detail::add_files_impl(fs, complete(f).branch_path(), wpath(f.leaf()), p, flags);
+		detail::add_files_impl(fs, boost::filesystem::absolute(f, boost::filesystem::initial_path()).branch_path(), wpath(f.leaf()), p, flags);
 #else
 		if (f.filename() == L".") f = f.parent_path();
-		detail::add_files_impl(fs, complete(f).parent_path(), wpath(f.filename()), p, flags);
+		detail::add_files_impl(fs, boost::filesystem::absolute(f, boost::filesystem::initial_path()).parent_path(), wpath(f.filename()), p, flags);
 #endif
 	}
 
@@ -359,11 +361,11 @@
 		wpath f = file;
 #if BOOST_VERSION < 103600
 		if (f.leaf() == L".") f = f.branch_path();
-		detail::add_files_impl(fs, complete(f).branch_path(), wpath(f.leaf()), detail::wdefault_pred
+		detail::add_files_impl(fs, boost::filesystem::absolute(f, boost::filesystem::initial_path()).branch_path(), wpath(f.leaf()), detail::wdefault_pred
 			, flags);
 #else
 		if (f.filename() == L".") f = f.parent_path();
-		detail::add_files_impl(fs, complete(f).parent_path(), wpath(f.filename())
+		detail::add_files_impl(fs, boost::filesystem::absolute(f, boost::filesystem::initial_path()).parent_path(), wpath(f.filename())
 			, detail::wdefault_pred, flags);
 #endif
 	}
--- src/torrent_info.cpp.orig	2011-02-20 20:08:14.748013769 +0100
+++ src/torrent_info.cpp	2011-02-20 20:09:32.680013589 +0100
@@ -228,8 +228,8 @@
 		fs::path new_path;
 		for (fs::path::const_iterator i = p.begin(); i != p.end(); ++i)
 		{
-			if (!valid_path_element(*i)) continue;
-			std::string pe = *i;
+			if (!valid_path_element((*i).string())) continue;
+			std::string pe = (*i).string();
 			trim_path_element(pe);
 			new_path /= pe;
 		}
--- src/logger.cpp.orig	2011-02-20 20:01:17.916013590 +0100
+++ src/logger.cpp	2011-02-20 20:01:48.544013580 +0100
@@ -65,7 +65,7 @@
 	{
 		logger_peer_plugin(std::string const& filename)
 		{
-			fs::path dir(fs::complete("libtorrent_ext_logs"));
+			fs::path dir(fs::absolute("libtorrent_ext_logs", fs::initial_path()));
 			if (!fs::exists(dir)) fs::create_directories(dir);
 			m_file.open((dir / filename).string().c_str(), std::ios_base::out | std::ios_base::out);
 			m_file << "\n\n\n";
--- src/create_torrent.cpp.orig	2011-02-20 18:47:52.388013583 +0100
+++ src/create_torrent.cpp	2011-02-20 19:19:00.008013585 +0100
@@ -62,10 +62,10 @@
 #ifdef TORRENT_WINDOWS
 
 #if TORRENT_USE_WPATH
-			std::wstring path = convert_to_wstring(p.external_file_string());
+			std::wstring path = convert_to_wstring(p.native());
 			DWORD attr = GetFileAttributesW(path.c_str());
 #else
-			std::string path = convert_to_native(p.external_file_string());
+			std::string path = convert_to_native(p.native());
 			DWORD attr = GetFileAttributesA(path.c_str());
 #endif
 			if (attr == INVALID_FILE_ATTRIBUTES) return 0;
@@ -73,7 +73,7 @@
 			return 0;
 #else
 			struct stat s;
-			if (lstat(convert_to_native(p.external_file_string()).c_str(), &s) < 0) return 0;
+			if (lstat(convert_to_native(p.native()).c_str(), &s) < 0) return 0;
 			int file_attr = 0;
 			if (s.st_mode & S_IXUSR) 
 				file_attr += file_storage::attribute_executable;
@@ -87,7 +87,7 @@
 		int TORRENT_EXPORT get_file_attributes(boost::filesystem::wpath const& p)
 		{
 #ifdef TORRENT_WINDOWS
-			std::wstring const& path = p.external_file_string();
+			std::wstring const& path = p.native();
 			DWORD attr = GetFileAttributesW(path.c_str());
 			if (attr == INVALID_FILE_ATTRIBUTES) return 0;
 			if (attr & FILE_ATTRIBUTE_HIDDEN) return file_storage::attribute_hidden;
@@ -124,12 +124,12 @@
 		std::time_t TORRENT_EXPORT get_file_mtime(boost::filesystem::path const& p)
 		{
 #if defined TORRENT_WINDOWS && TORRENT_USE_WPATH
-			std::wstring path = convert_to_wstring(p.external_file_string());
+			std::wstring path = convert_to_wstring(p.native());
 			struct _stat s;
 			if (::_wstat(path.c_str(), &s) < 0) return 0;
 			return s.st_mtime;
 #else
-			std::string path = convert_to_native(p.external_file_string());
+			std::string path = convert_to_native(p.native());
 			return get_file_mtime(p.string().c_str());
 #endif
 		}
@@ -167,7 +167,7 @@
 #if defined TORRENT_WINDOWS
 			return "";
 #else
-			std::string path = convert_to_native(p.external_file_string());
+			std::string path = convert_to_native(p.native());
 			return get_symlink_path_impl(p.string().c_str());
 #endif
 		}
@@ -403,7 +403,7 @@
 				for (fs::path::iterator j = (m_files.at(0).symlink_path.begin());
 					j != m_files.at(0).symlink_path.end(); ++j)
 				{
-					sympath_e.list().push_back(entry(*j));
+					sympath_e.list().push_back(entry((*j).string()));
 				}
 			}
 		}
@@ -432,7 +432,7 @@
 					for (fs::path::iterator j = boost::next(i->path.begin());
 						j != i->path.end(); ++j)
 					{
-						path_e.list().push_back(entry(*j));
+						path_e.list().push_back(entry((*j).string()));
 					}
 					if (i->pad_file || i->hidden_attribute || i->executable_attribute || i->symlink_attribute)
 					{
@@ -449,7 +449,7 @@
 						for (fs::path::iterator j = (i->symlink_path.begin());
 							j != i->symlink_path.end(); ++j)
 						{
-							sympath_e.list().push_back(entry(*j));
+							sympath_e.list().push_back(entry((*j).string()));
 						}
 					}
 				}
--- src/file.cpp.orig	2011-02-20 19:54:41.264013567 +0100
+++ src/file.cpp	2011-02-20 19:54:53.564013458 +0100
@@ -194,10 +194,10 @@
 
 #if TORRENT_USE_WPATH
 #define CreateFile_ CreateFileW
-		m_path = convert_to_wstring(path.external_file_string());
+		m_path = convert_to_wstring(path.native());
 #else
 #define CreateFile_ CreateFileA
-		m_path = convert_to_native(path.external_file_string());
+		m_path = convert_to_native(path.native());
 #endif
 
 		TORRENT_ASSERT((mode & mode_mask) < sizeof(mode_array)/sizeof(mode_array[0]));
@@ -237,7 +237,7 @@
 		static const int no_buffer_flag[] = {0, 0};
 #endif
 
- 		m_fd = ::open(convert_to_native(path.external_file_string()).c_str()
+ 		m_fd = ::open(convert_to_native(path.native()).c_str()
  			, mode_array[mode & rw_mask] | no_buffer_flag[(mode & no_buffer) >> 2], permissions);
 
 #ifdef TORRENT_LINUX
@@ -246,7 +246,7 @@
 		if (m_fd == -1 && (mode & no_buffer) && errno == EINVAL)
 		{
 			mode &= ~no_buffer;
-			m_fd = ::open(path.external_file_string().c_str()
+			m_fd = ::open(path.native().c_str()
 				, mode & (rw_mask | no_buffer), permissions);
 		}
 
--- src/storage.cpp.orig	2011-02-20 20:02:56.592013677 +0100
+++ src/storage.cpp	2011-02-20 20:07:42.644013964 +0100
@@ -124,7 +124,7 @@
 	template <class Path>
 	void recursive_copy(Path const& old_path, Path const& new_path, error_code& ec)
 	{
-		using boost::filesystem::basic_directory_iterator;
+		using boost::filesystem::directory_iterator;
 #ifndef BOOST_NO_EXCEPTIONS
 		try {
 #endif
@@ -132,7 +132,7 @@
 		if (is_directory(old_path))
 		{
 			create_directory(new_path);
-			for (basic_directory_iterator<Path> i(old_path), end; i != end; ++i)
+			for (directory_iterator i(old_path), end; i != end; ++i)
 			{
 #if BOOST_VERSION < 103600
 				recursive_copy(i->path(), new_path / i->path().leaf(), ec);
@@ -165,13 +165,13 @@
 	template <class Path>
 	void recursive_remove(Path const& old_path)
 	{
-		using boost::filesystem::basic_directory_iterator;
+		using boost::filesystem::directory_iterator;
 #ifndef BOOST_NO_EXCEPTIONS
 		try {
 #endif
 		if (is_directory(old_path))
 		{
-			for (basic_directory_iterator<Path> i(old_path), end; i != end; ++i)
+			for (directory_iterator i(old_path), end; i != end; ++i)
 				recursive_remove(i->path());
 			remove(old_path);
 		}
@@ -401,13 +401,13 @@
 #ifndef BOOST_NO_EXCEPTIONS
 			try {
 #endif
-			m_save_path = fs::complete(path);
+			m_save_path = fs::absolute(path, fs::initial_path());
 #ifndef BOOST_NO_EXCEPTIONS
 			} catch (std::exception&) {
 			m_save_path = path;
 			}
 #endif
-			TORRENT_ASSERT(m_save_path.is_complete());
+			TORRENT_ASSERT(m_save_path.is_absolute());
 		}
 
 		bool has_any_file();
@@ -1024,7 +1024,7 @@
 		for (file_storage::iterator i = f.begin()
 			, end(f.end()); i != end; ++i)
 		{
-			to_move.insert(to_move.begin(), *i->path.begin());
+			to_move.insert(to_move.begin(), (*i->path.begin()).string());
 		}
 
 		for (std::set<std::string>::const_iterator i = to_move.begin()
@@ -1809,7 +1809,7 @@
 	{
 		if (m_storage->move_storage(save_path))
 		{
-			m_save_path = fs::complete(save_path);
+			m_save_path = fs::absolute(save_path, fs::initial_path());
 			return 0;
 		}
 		return -1;
--- src/file_storage.cpp.orig	2011-02-20 19:55:55.824013614 +0100
+++ src/file_storage.cpp	2011-02-20 19:57:52.440013714 +0100
@@ -188,7 +188,7 @@
 		else
 		{
 			if (m_files.empty())
-				m_name = *file.begin();
+				m_name = (*file.begin()).string();
 		}
 		TORRENT_ASSERT(m_name == *file.begin());
 		m_files.push_back(file_entry());
@@ -223,7 +223,7 @@
 		else
 		{
 			if (m_files.empty())
-				m_name = *ent.path.begin();
+				m_name = (*ent.path.begin()).string();
 		}
 		m_files.push_back(ent);
 		file_entry& e = m_files.back();
